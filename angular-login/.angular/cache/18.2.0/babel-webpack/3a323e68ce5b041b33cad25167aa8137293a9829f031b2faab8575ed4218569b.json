{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    http;\n    loginUrl = 'http://185.209.230.19:8081/user/login';\n    //private loginUrl = '/api/user/login';\n    constructor(http) {\n      this.http = http;\n    }\n    login(userName, userPassword) {\n      const body = {\n        userName,\n        userPassword\n      };\n      console.log('Intentando login con:', body);\n      console.log('URL de login:', this.loginUrl);\n      return this.http.post(this.loginUrl, body).pipe(tap(response => {\n        sessionStorage.setItem('user', JSON.stringify(response));\n        this.redirectToTasks(); // Llamamos a la redirección de la app todolist React\n      }), catchError(this.handleError));\n    }\n    handleError(error) {\n      let errorMessage = 'Ocurrio un error';\n      if (error.error instanceof ErrorEvent) {\n        errorMessage = `Client-side error: ${error.error.message}`;\n      } else {\n        errorMessage = `Server error: ${error.status}\\nMessage: ${error.message}`;\n      }\n      console.error(errorMessage);\n      return throwError(() => new Error(errorMessage));\n    }\n    logout() {\n      sessionStorage.removeItem('user');\n    }\n    isAuthenticated() {\n      return !!sessionStorage.getItem('user');\n    }\n    // método para redirección\n    redirectToTasks() {\n      window.location.href = 'http://localhost:9000/tasks';\n    }\n    redirectToRegister() {\n      window.location.href = 'http://localhost:3001/register'; // URL de la app Vue.js\n    }\n    static ɵfac = function AuthService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AuthService;\n})();","map":{"version":3,"names":["throwError","catchError","tap","AuthService","http","loginUrl","constructor","login","userName","userPassword","body","console","log","post","pipe","response","sessionStorage","setItem","JSON","stringify","redirectToTasks","handleError","error","errorMessage","ErrorEvent","message","status","Error","logout","removeItem","isAuthenticated","getItem","window","location","href","redirectToRegister","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\jonat\\Desktop\\Single-spa-app-main\\angular-login\\src\\app\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError,tap } from 'rxjs';\n//import { response } from 'express';\n\ninterface LoginResponse {\n  id: number;\n  userName: string;\n  userPassword: string;\n}\n\n@Injectable({\n  providedIn:'root'\n})\nexport class AuthService {\n  private loginUrl = 'http://185.209.230.19:8081/user/login';\n  //private loginUrl = '/api/user/login';\n\n  constructor(private http: HttpClient){\n  }\n  login(userName: string, userPassword: string): Observable<LoginResponse> {\n    const body = { userName, userPassword };\n    console.log('Intentando login con:', body);\n    console.log('URL de login:', this.loginUrl);\n\n    return this.http.post<LoginResponse>(this.loginUrl, body).pipe(\n     tap((response:LoginResponse)=>{\n      sessionStorage.setItem('user',JSON.stringify(response));\n      this.redirectToTasks(); // Llamamos a la redirección de la app todolist React\n     }),\n      catchError(this.handleError)\n    );\n  }\n\n  private handleError(error:HttpErrorResponse){\n    let errorMessage= 'Ocurrio un error';\n    if(error.error instanceof ErrorEvent){\n      errorMessage = `Client-side error: ${error.error.message}`;\n    }else {\n      errorMessage= `Server error: ${error.status}\\nMessage: ${error.message}`;\n    }\n    console.error(errorMessage);\n    return throwError(()=> new Error(errorMessage));\n  }\n\n  logout(): void {\n    sessionStorage.removeItem('user');\n  }\n\n  isAuthenticated():boolean{\n    return !!sessionStorage.getItem('user');\n  }\n\n  // método para redirección\n  private redirectToTasks(): void {\n    window.location.href = 'http://localhost:9000/tasks';\n  }\n\n  private redirectToRegister(): void {\n    window.location.href = 'http://localhost:3001/register'; // URL de la app Vue.js\n  }\n}\n"],"mappings":"AAEA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,EAACC,GAAG,QAAQ,MAAM;;;AAYrC,WAAaC,WAAW;EAAlB,MAAOA,WAAW;IAIFC,IAAA;IAHZC,QAAQ,GAAG,uCAAuC;IAC1D;IAEAC,YAAoBF,IAAgB;MAAhB,KAAAA,IAAI,GAAJA,IAAI;IACxB;IACAG,KAAKA,CAACC,QAAgB,EAAEC,YAAoB;MAC1C,MAAMC,IAAI,GAAG;QAAEF,QAAQ;QAAEC;MAAY,CAAE;MACvCE,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEF,IAAI,CAAC;MAC1CC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE,IAAI,CAACP,QAAQ,CAAC;MAE3C,OAAO,IAAI,CAACD,IAAI,CAACS,IAAI,CAAgB,IAAI,CAACR,QAAQ,EAAEK,IAAI,CAAC,CAACI,IAAI,CAC7DZ,GAAG,CAAEa,QAAsB,IAAG;QAC7BC,cAAc,CAACC,OAAO,CAAC,MAAM,EAACC,IAAI,CAACC,SAAS,CAACJ,QAAQ,CAAC,CAAC;QACvD,IAAI,CAACK,eAAe,EAAE,CAAC,CAAC;MACzB,CAAC,CAAC,EACDnB,UAAU,CAAC,IAAI,CAACoB,WAAW,CAAC,CAC7B;IACH;IAEQA,WAAWA,CAACC,KAAuB;MACzC,IAAIC,YAAY,GAAE,kBAAkB;MACpC,IAAGD,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAC;QACnCD,YAAY,GAAG,sBAAsBD,KAAK,CAACA,KAAK,CAACG,OAAO,EAAE;MAC5D,CAAC,MAAK;QACJF,YAAY,GAAE,iBAAiBD,KAAK,CAACI,MAAM,cAAcJ,KAAK,CAACG,OAAO,EAAE;MAC1E;MACAd,OAAO,CAACW,KAAK,CAACC,YAAY,CAAC;MAC3B,OAAOvB,UAAU,CAAC,MAAK,IAAI2B,KAAK,CAACJ,YAAY,CAAC,CAAC;IACjD;IAEAK,MAAMA,CAAA;MACJZ,cAAc,CAACa,UAAU,CAAC,MAAM,CAAC;IACnC;IAEAC,eAAeA,CAAA;MACb,OAAO,CAAC,CAACd,cAAc,CAACe,OAAO,CAAC,MAAM,CAAC;IACzC;IAEA;IACQX,eAAeA,CAAA;MACrBY,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,6BAA6B;IACtD;IAEQC,kBAAkBA,CAAA;MACxBH,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,gCAAgC,CAAC,CAAC;IAC3D;;uCA9CW/B,WAAW,EAAAiC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;;aAAXpC,WAAW;MAAAqC,OAAA,EAAXrC,WAAW,CAAAsC,IAAA;MAAAC,UAAA,EAFX;IAAM;;SAENvC,WAAW;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}